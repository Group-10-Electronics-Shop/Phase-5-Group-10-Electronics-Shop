name: CI - PR checks
on:
  pull_request:
    branches: [ main ]

jobs:
  frontend-check:
    name: frontend-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check frontend presence
        id: check_client
        run: |
          if [ -d client ] && [ -f client/package.json ]; then
            echo "has_client=true" >> $GITHUB_OUTPUT
          else
            echo "has_client=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node (only if frontend exists)
        if: steps.check_client.outputs.has_client == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install & Run frontend tests
        if: steps.check_client.outputs.has_client == 'true'
        run: |
          cd client
          npm ci || npm install
          # run tests (allow them to fail without failing overall CI if you prefer)
          npm test --silent

  backend-check:
    name: backend-check
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend deps if present
        run: |
          if [ -f server/requirements.txt ]; then
            python -m pip install --upgrade pip
            pip install -r server/requirements.txt
          elif [ -f requirements.txt ]; then
            python -m pip install --upgrade pip
            pip install -r requirements.txt
          else
            echo "No requirements file found; skipping install"
          fi

      - name: Wait for Postgres
        run: |
          # Wait for the postgres service to be healthy (pg_isready), retry if needed
          for i in {1..15}; do
            pg_isready -h localhost -p 5432 && break
            echo "Waiting for postgres..."
            sleep 2
          done

      - name: Set test env vars
        env:
          # service is accessible at localhost:5432
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          echo "TEST_DATABASE_URL=${TEST_DATABASE_URL}" >> $GITHUB_ENV
          # Provide a default JWT secret for tests if none in secrets
          echo "JWT_SECRET=${{ secrets.JWT_SECRET || 'test-jwt-secret' }}" >> $GITHUB_ENV

      - name: Run DB migrations (if alembic present)
        run: |
          if [ -f alembic.ini ] || [ -d alembic ]; then
            pip install alembic || true
            export DATABASE_URL=${TEST_DATABASE_URL}
            alembic upgrade head || echo "alembic upgrade failed (continue)"
          else
            echo "No alembic config - skipping migrations"
          fi

      - name: Run backend tests (pytest)
        env:
          TEST_DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
        run: |
          # run pytest if tests exist
          if [ -d tests ] || ls tests/*.py >/dev/null 2>&1; then
            pytest -q
          else
            echo "No tests folder found; skipping pytest"
          fi