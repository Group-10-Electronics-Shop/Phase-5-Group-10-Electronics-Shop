name: CI - PR checks

on:
  pull_request:

jobs:
  frontend-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect frontend directory (client | my-app)
        id: detect_frontend
        run: |
          if [ -d client ] && [ -f client/package.json ]; then
            echo "frontend_dir=client" >> $GITHUB_OUTPUT
          elif [ -d my-app ] && [ -f my-app/package.json ]; then
            echo "frontend_dir=my-app" >> $GITHUB_OUTPUT
          else
            echo "frontend_dir=" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node (only if frontend exists)
        if: steps.detect_frontend.outputs.frontend_dir != ''
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install & Run frontend tests (only if frontend exists)
        if: steps.detect_frontend.outputs.frontend_dir != ''
        run: |
          set -e
          cd "${{ steps.detect_frontend.outputs.frontend_dir }}"
          echo "Running frontend steps in $(pwd)"
          npm ci || npm install
          npm test --silent || echo "Frontend tests exited with non-zero status"

  backend-check:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 2s --health-timeout 5s --health-retries 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Show debug info
        run: |
          python --version
          which python || true
          which pip || true
          echo "PWD: $(pwd)"
          ls -la

      - name: Ensure pg_isready is available
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/server/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend deps (incl. pytest)
        run: |
          set -e
          python -m pip install --upgrade pip
          if [ -f server/requirements.txt ]; then
            python -m pip install -r server/requirements.txt
          else
            python -m pip install pytest flask
          fi
          python -m pip install pytest

      - name: Export environment & PYTHONPATH (supports secrets + safe fallbacks)
        run: |
          if [ -n "${{ secrets.DATABASE_URL }}" ]; then
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          else
            echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
          fi

          if [ -n "${{ secrets.JWT_SECRET_KEY }}" ]; then
            echo "JWT_SECRET=${{ secrets.JWT_SECRET_KEY }}" >> $GITHUB_ENV
          elif [ -n "${{ secrets.JWT_SECRET }}" ]; then
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          else
            echo "JWT_SECRET=test-jwt-secret" >> $GITHUB_ENV
          fi

          echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV
          echo "PS: DATABASE_URL will be $DATABASE_URL"

      - name: Wait for Postgres to be ready
        run: |
          for i in $(seq 1 30); do
            pg_isready -h localhost -p 5432 -U postgres >/dev/null 2>&1 && { echo "Postgres is ready"; break; }
            echo "Waiting for postgres... ($i/30)";
            sleep 2;
            if [ "$i" -eq 30 ]; then
              echo "Postgres did not become ready in time";
              exit 1;
            fi
          done

      - name: Run Alembic migrations (best-effort)
        run: |
          set -e
          if [ -f server/alembic.ini ] || [ -d server/alembic ]; then
            python -m pip install alembic || true
            cd server
            export DATABASE_URL=${DATABASE_URL}
            python -m alembic upgrade head || echo "alembic upgrade failed (continuing)"
            cd ..
          else
            echo "No alembic config under server/ - skipping migrations"
          fi

      - name: Debug files before running tests
        run: |
          echo "Root files:"
          ls -la
          echo "server files:"
          ls -la server || true
          echo "tests files (root):"
          ls -la tests || true

      - name: Run backend tests (pytest)
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          PYTHONPATH: ${{ env.PYTHONPATH }}
        run: |
          set -e
          python -m pytest -q